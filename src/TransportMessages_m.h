//
// Generated file, do not edit! Created by opp_msgtool 6.1 from TransportMessages.msg.
//

#ifndef __TRANSPORTMESSAGES_M_H
#define __TRANSPORTMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class TransportMsg;
/**
 * Class generated from <tt>TransportMessages.msg:11</tt> by opp_msgtool.
 * <pre>
 * //
 * // Transport message that encapsulates CCNx messages
 * //
 * packet TransportMsg
 * {
 *     // source, destination addresses
 *     string sourceAddress;
 *     bool broadcastMsg;
 *     string destinationAddress;
 * 
 *     // msg sizes in bytes
 *     int headerSize;
 *     int payloadSize;
 * 
 * }
 * </pre>
 */
class TransportMsg : public ::omnetpp::cPacket
{
  protected:
    omnetpp::opp_string sourceAddress;
    bool broadcastMsg = false;
    omnetpp::opp_string destinationAddress;
    int headerSize = 0;
    int payloadSize = 0;

  private:
    void copy(const TransportMsg& other);

  protected:
    bool operator==(const TransportMsg&) = delete;

  public:
    TransportMsg(const char *name=nullptr, short kind=0);
    TransportMsg(const TransportMsg& other);
    virtual ~TransportMsg();
    TransportMsg& operator=(const TransportMsg& other);
    virtual TransportMsg *dup() const override {return new TransportMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSourceAddress() const;
    virtual void setSourceAddress(const char * sourceAddress);

    virtual bool getBroadcastMsg() const;
    virtual void setBroadcastMsg(bool broadcastMsg);

    virtual const char * getDestinationAddress() const;
    virtual void setDestinationAddress(const char * destinationAddress);

    virtual int getHeaderSize() const;
    virtual void setHeaderSize(int headerSize);

    virtual int getPayloadSize() const;
    virtual void setPayloadSize(int payloadSize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TransportMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TransportMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline TransportMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<TransportMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __TRANSPORTMESSAGES_M_H

